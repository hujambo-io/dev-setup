---
- name: Setup Development Environment
  hosts: all
  vars:
    tools:
      - name: git
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:git

      - name: wget
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:wget

      - name: vim
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:vim

      - name: htop
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:htop

      - name: tree
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:tree

      - name: jq
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:jq

      - name: nvm
        roles: ["frontend"]
        platforms:
          type: universal
        install_type: standard:nvm

      - name: python
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:python

      - name: ffmpeg
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:ffmpeg

      - name: ruby
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:ruby

      - name: r
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:r

      - name: rstudio
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:rstudio

      - name: android-sdk
        roles: ["mobile"]
        platforms:
          type: universal
        install_type: standard:android-sdk

      - name: android-studio
        roles: ["mobile"]
        platforms:
          type: universal
        install_type: standard:android-studio

      - name: mongodb-compass
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:mongodb-compass

      - name: slack
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:slack

      - name: zoom
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:zoom

      - name: postman
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:postman

      - name: k6
        roles: ["QA"]
        platforms:
          type: universal
        install_type: standard:k6

      - name: httpie
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:httpie

      - name: bruno
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:bruno

      - name: selenium-server
        roles: ["QA"]
        platforms:
          type: universal
        install_type: standard:selenium-server

      - name: firefox
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:firefox
          Linux:
            install_type: standard:firefox
          Windows:
            install_type: standard:firefox

      - name: curl
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:curl

      - name: zsh
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:zsh

      - name: tmux
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:tmux

      - name: telnet
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:telnet

      - name: docker
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: shell:brew install --cask docker
          Linux:  
            install_type: shell:sudo apt-get install docker-ce docker-ce-cli containerd.io -y 
          Windows:  
            install_type: shell:choco install docker-desktop -y

      - name: miniconda
        roles: ["backend"]
        platforms:
          type: universal
        install_type: standard:miniconda

      - name: flutter
        roles: ["mobile"]
        platforms:
          type: universal
        install_type: standard:flutter

      - name: cocoapods
        roles: ["mobile"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:cocoapods
            # shell:brew install brew-gem && && brew link --force brew-gem && gem install cocoapods

      - name: android-platform-tools
        roles: ["mobile"]
        platforms:
          type: universal
        install_type: standard:android-platform-tools

      - name: fastlane
        roles: ["mobile"]
        platforms:
          type: universal
        install_type: standard:fastlane

      - name: google-chrome
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:google-chrome
          Linux:
            install_type: standard:google-chrome-stable
          Windows:
            install_type: standard:googlechrome

      - name: microsoft-edge
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:microsoft-edge
          Linux:
            install_type: standard:microsoft-edge-stable
          Windows:
            install_type: standard:microsoft-edge

      - name: visual-studio-code
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:visual-studio-code

      - name: intellij-idea-ce
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:intellij-idea-ce

      - name: netbeans
        roles: ["full-stack"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:netbeans
          Linux:
            install_type: standard:netbeans-linux-deb-package
          Windows:
            install_type: standard:netbeans

      - name: eclipse-java
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:eclipse-java

      - name: papyrus
        roles: ["full-stack"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:papyrus
          Linux:
            install_type: standard:papyrus-linux-deb-package
          Windows:
            install_type: standard:papyrus

      - name: font-fira-code
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:font-fira-code

      - name: syncthing
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: syncthing:syncthing
          Linux:
            install_type: standard:syncthing
          Windows:
            install_type: standard:syncthing

      - name: cypher-shell
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:cypher-shell

      - name: protobuf-compiler
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: shell:brew install protobuf
          Linux:
            install_type: standard:protobuf-compiler
          Windows:
            install_type: shell:choco install protoc -y

      - name: build-essential
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: special:xcode_install
          Linux:
            install_type: standard:build-essential
          Windows:
            install_type: standard:build-tools

      - name: apt-transport-https
        roles: ["default"]
        platforms:
          type: platform-specific
          Linux:
            install_type: standard:apt-transport-https

      - name: ca-certificates
        roles: ["default"]
        platforms:
          type: platform-specific
          Linux:
            install_type: standard:ca-certificates

      - name: gnupg
        roles: ["default"]
        platforms:
          type: platform-specific
          Linux:
            install_type: standard:gnupg

      - name: lsb-release
        roles: ["default"]
        platforms:
          type: platform-specific
          Linux:
            install_type: standard:lsb-release

      - name: oh-my-posh
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:on-my-posh

      - name: oh-my-zsh
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: shell:sh -c '[ ! -d "$HOME/.oh-my-zsh" ] && curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh || echo "oh-my-zsh already installed"'
          Linux:    
            install_type: shell:sh -c '[ ! -d "$HOME/.oh-my-zsh" ] && curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh || echo "oh-my-zsh already installed"'
            
      - name: neo4j
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:neo4j

#      - name: neo4j-desktop
#        roles: ["full-stack"]
#        platforms:
#          type: platform-specific
#          Darwin:
#            install_type: special:neo4j_desktop_install
#          Linux:
#            install_type: special:neo4j_desktop_install
#          Windows:
#            install_type: special:neo4j_desktop_install

      - name: zip
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:zip

#      - name: sdkman
#        roles: ["default"]
#        platforms:
#          type: platform-specific
#          Windows:
#            install_type: special:sdkman_install_windows

      - name: asdf
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:asdf
          Linux:
            install_type: special:asdf_install
          Windows:
            install_type: special:asdf_install

      - name: iterm2
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:iterm2

      - name: yq
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:yq

      - name: fd
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:fd

      - name: azure-cli
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:azure-cli

      - name: google-cloud-sdk
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:google-cloud-sdk

      - name: awscli
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:awscli

      - name: notion
        roles: ["default"]
        platforms:
          type: univeral 
        install_type: standard:notion
      
      - name: notion-calendar
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:notion-calendar
      
      - name: nomachine
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:nomachine

      - name: raycast
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:raycast

  tasks:

    # Debug and information tasks - only these should be 'always'
#    - name: Debug tools variable
#      ansible.builtin.debug:
#        msg: "{{ tools }}"
#      tags: ['always']

#    - name: Debug each tool in tools
#      ansible.builtin.debug:
#        msg: "Tool: {{ item }}"
#      loop: "{{ tools }}"
#      tags: ['always']

    # Include Windows tasks only if we're on Windows
    - name: Include Windows tasks
      include_tasks: "{{ playbook_dir }}/windows_tasks.yml"
      when: 
        - ansible_facts['os_family'] == 'Windows'
        - ansible_facts['distribution'] != 'MacOSX'

    - name: Install Xcode Command Line Tools
      ansible.builtin.shell: |
        if ! xcode-select --print-path &>/dev/null; then
          xcode-select --install
        else
          echo "Xcode Command Line Tools are already installed."
        fi
      args:
        executable: /bin/bash
      when: 
        - item.platforms['Darwin'] is defined
        - item.platforms['Darwin']['install_type'] == "special:xcode_install"
      loop: "{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | list }}"
      tags:
        - setup

    - name: Debug sdkman details
      ansible.builtin.debug:
        msg: |
          Item: {{ item | to_yaml }}
          Install type: {{ item.platforms['Darwin']['install_type'] }}
      loop: "{{ tools | selectattr('name', 'equalto', 'sdkman') | list }}"
      tags: ['install']

    - name: Install sdkman
      ansible.builtin.shell:
        cmd: |
          if [ ! -d "$HOME/.sdkman" ]; then
            curl -s "https://get.sdkman.io" | bash && \
            echo 'export SDKMAN_DIR="$HOME/.sdkman"' >> ~/.zshrc && \
            echo '[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"' >> ~/.zshrc
            echo "sdkman installed successfully"
          else
            echo "sdkman is already installed"
          fi
      args:
        executable: /bin/zsh
      loop: "{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | selectattr('platforms.Darwin.install_type', 'equalto', 'special:sdkman_install') | list }}"
      when:
        - item.platforms['Darwin'] is defined
        - ansible_facts['os_family'] == 'Darwin'
      register: sdkman_install_result
      changed_when: "'installed successfully' in sdkman_install_result.stdout"
      tags:
        - install

    # Uninstall sdkman
    - name: Uninstall sdkman
      ansible.builtin.shell:
        cmd: rm -rf ~/.sdkman
      loop: "{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | selectattr('platforms.Darwin.install_type', 'equalto', 'special:sdkman_install') | list }}"
      when:
        - item.platforms.Darwin is defined
        - ansible_facts['os_family'] == 'Darwin'
      tags:
        - uninstall


    - name: Install asdf
      ansible.builtin.shell:
        cmd: |
          if [ ! -d "$HOME/.asdf" ]; then
            git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.13.1
            if [ "{{ ansible_facts['os_family'] }}" == "Darwin" ]; then
              echo '. "$HOME/.asdf/asdf.sh"' >> ~/.zshrc
              echo '. "$HOME/.asdf/completions/asdf.bash"' >> ~/.zshrc
            else
              echo '. "$HOME/.asdf/asdf.sh"' >> ~/.bashrc
              echo '. "$HOME/.asdf/completions/asdf.bash"' >> ~/.bashrc
            fi
            echo "asdf installed successfully"
          else
            echo "asdf already installed"
          fi
      args:
        executable: /bin/bash
      loop: "{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | selectattr('platforms.Linux.install_type', 'equalto', 'special:asdf_install') | list }}"
      when:
        - item.platforms['Linux'] is defined
        - ansible_facts['os_family'] == 'Linux'
      register: asdf_install_result
      changed_when: "'installed successfully' in asdf_install_result.stdout"
      tags:
        - install

    - name: Check asdf plugins
      ansible.builtin.shell:
        cmd: |
          . "$HOME/.asdf/asdf.sh"
          asdf plugin list | grep -q "." || {
            asdf plugin add java
            asdf plugin add nodejs
            asdf plugin add python
            asdf plugin add flutter
          }
      args:
        executable: /bin/bash
      tags: ['install']

    - name: Install default versions (only if no versions exist)
      ansible.builtin.shell:
        cmd: |
          . "$HOME/.asdf/asdf.sh"
          asdf list | grep -q "." || {
            asdf install java latest
            asdf global java latest
            asdf install nodejs latest
            asdf global nodejs latest
            asdf install python latest
            asdf global python latest
            asdf install flutter latest
            asdf global flutter latest
          }
      args:
        executable: /bin/bash
      tags: ['install']

    - name: Uninstall asdf
      ansible.builtin.shell:
        cmd: rm -rf ~/.asdf
      loop: "{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | selectattr('platforms.Darwin.install_type', 'equalto', 'special:asdf_install') | list }}"
      when:
        - item.platforms[ansible_facts['os_family']] is defined
        - ansible_facts['os_family'] in ['Darwin', 'Linux']
      tags:
        - uninstall

    # Universal tools installation
    - name: Install universal tools on Linux
      ansible.builtin.package:
        name: "{{ item.name }}"
        state: present
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Linux'
      tags: ['install']
      
    - name: Install universal tools on macOS
      community.general.homebrew:
        name: "{{ item.name }}"
        state: present
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Darwin'
      tags: ['install']
        
    # Install platform-specific tools
    - name: Install platform-specific tools with package manager
      ansible.builtin.package:
        name: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
        state: present
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('standard:')
        - not item.platforms[ansible_facts['os_family']]['install_type'].startswith('special:')
        - ansible_facts['os_family'] == 'Linux'
      tags: ['install']

    - name: Install platform-specific tools with homebrew
      community.general.homebrew:
        name: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
        state: present
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('standard:')
        - not item.platforms[ansible_facts['os_family']]['install_type'].startswith('special:')
        - ansible_facts['os_family'] == 'Darwin'
      tags: ['install']

    - name: Install platform-specific tools with shell commands
      ansible.builtin.shell:
        cmd: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('shell:')
        - not item.platforms[ansible_facts['os_family']]['install_type'].startswith('special:')
      tags: ['install']

    - name: Debug platform-specific single app
      ansible.builtin.debug:
        msg: >
          Platform: {{ ansible_facts['os_family'] }}
          Item: {{ item | to_yaml }}
          Install type: {{ item.platforms[ansible_facts['os_family']]['install_type'] }}
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: single_app is defined
      tags: ['install']

#    - name: Debug current item
#      ansible.builtin.debug:
#        msg: "Current item: {{ item }}"
#      loop: "{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}"
#      tags:
#        - install

    # Uninstall tasks for Linux/macOS
    - name: Uninstall universal tools on Linux
      ansible.builtin.package:
        name: "{{ item.name }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Linux'
      ignore_errors: true
      tags: ['uninstall']

    - name: Uninstall universal tools on macOS
      community.general.homebrew:
        name: "{{ item.name }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Darwin'
      ignore_errors: true
      tags: ['uninstall']

    # Uninstall platform-specific tools
    - name: Uninstall platform-specific tools with package manager
      ansible.builtin.package:
        name: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('standard:')
        - ansible_facts['os_family'] == 'Linux'
      ignore_errors: true
      tags: ['uninstall']

    - name: Uninstall platform-specific tools with homebrew
      community.general.homebrew:
        name: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('standard:')
        - ansible_facts['os_family'] == 'Darwin'
      ignore_errors: true
      tags: ['uninstall']


    # Uninstall role-based universal tools
    - name: Uninstall role-based universal tools on Linux
      ansible.builtin.package:
        name: "{{ item.name }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Linux'
      ignore_errors: true
      tags: ['uninstall']


    - name: Uninstall role-based universal tools on macOS
      community.general.homebrew:
        name: "{{ item.name }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Darwin'
      ignore_errors: true
      tags: ['uninstall']

    # Role-based uninstall
    - name: Uninstall role-based platform-specific tools with package manager
      ansible.builtin.package:
        name: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('standard:')
        - ansible_facts['os_family'] == 'Linux'
      ignore_errors: true
      tags: ['uninstall']

    - name: Uninstall role-based platform-specific tools with homebrew
      community.general.homebrew:
        name: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('standard:')
        - ansible_facts['os_family'] == 'Darwin'
      ignore_errors: true
      tags: ['uninstall']

#    - name: Log unsupported tools
#      ansible.builtin.debug:
#        msg: "Tool {{ item.name }} has no valid install_type for {{ ansible_facts['os_family'] }}. Skipping..."
#      loop: "{{ tools | selectattr('platforms.type', 'equalto', 'universal') | list }}"
#      when: 
#        - item.platforms is defined
#        - item.platforms[ansible_facts['os_family']] is defined
#        - item.platforms[ansible_facts['os_family']]['install_type'] is not defined
#      tags:
#        - always

    # Debug uninstallation results
#    - name: Debug uninstallation results
#      ansible.builtin.debug:
#        var: uninstall_results
#      tags:
#        - unintall 



    - name: Check if project structure exists
      ansible.builtin.stat:
        path: "~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate"
      register: project_template_dir
      tags: ['install']

    - name: Create base project directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      when: not project_template_dir.stat.exists
      loop:
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/01-Requirements
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/02-Draft
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/03-Design
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/04-Prototype
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/05-DevelopmentNotes
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/06-TestingPlans
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/07-ReferenceMaterials
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/03-Src
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/05-Tests/01-UnitTests
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/05-Tests/02-IntegrationTests
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/05-Tests/03-EndToEndTests
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/01-WeeklyReports
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/02-MonthlyReviews
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/03-QuarterlyReviews
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/04-InitialProposal
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/05-TechnicalSpecs
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/06-FinalReport
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/07-Presentations
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/01-Requirements
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/02-Draft
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/03-Design
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/04-Prototype
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/05-DevelopmentNotes
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/06-TestingPlans
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/07-ReferenceMaterials
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/03-Src
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/05-Tests/01-UnitTests
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/05-Tests/02-IntegrationTests
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/05-Tests/03-EndToEndTests
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/01-WeeklyReports
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/02-MonthlyReviews
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/03-QuarterlyReviews
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/04-InitialProposal
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/05-TechnicalSpecs
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/06-FinalReport
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/07-Presentations
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/01-Requirements
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/02-Draft
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/03-Design
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/04-Prototype
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/05-DevelopmentNotes
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/06-TestingPlans
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/07-ReferenceMaterials
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/03-Src
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/05-Tests/01-UnitTests
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/05-Tests/02-IntegrationTests
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/05-Tests/03-EndToEndTests
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/01-WeeklyReports
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/02-MonthlyReviews
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/03-QuarterlyReviews
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/04-InitialProposal
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/05-TechnicalSpecs
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/06-FinalReport
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/07-Presentations
      tags: ['install']
