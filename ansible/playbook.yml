---
- name: Setup Development Environment
  hosts: all
  vars:
    admin_user: "{{ lookup('env', 'ADMIN_USER') }}"
    tools:
      - name: git
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:git
        needs_admin: false    # Add this field

      - name: wget
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:wget
        needs_admin: false    # Add this field

      - name: vim
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:vim
        needs_admin: false    # Add this field

      - name: htop
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:htop
        needs_admin: false    # Add this field

      - name: tree
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:tree
        needs_admin: false    # Add this field

      - name: jq
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:jq
        needs_admin: false    # Add this field

      - name: nvm
        roles: ["frontend"]
        platforms:
          type: universal
        install_type: standard:nvm
        needs_admin: false    # Add this field

      - name: python
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:python
        needs_admin: false    # Add this field

      - name: ffmpeg
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:ffmpeg
        needs_admin: false    # Add this field

      - name: ruby
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:ruby
        needs_admin: false    # Add this field

      - name: r
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:r
        needs_admin: true    # Add this field

      - name: rstudio
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:rstudio
        needs_admin: true    # Add this field

#      - name: android-sdk
#        roles: ["mobile"]
#        platforms:
#          type: universal
#        install_type: standard:android-sdk

      - name: android-studio
        roles: ["mobile"]
        platforms:
          type: universal
        install_type: standard:android-studio
        needs_admin: true    # Add this field

      - name: springboot
        roles: ["backend"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:springtoolsuite
          Linux:
            install_type: standard:springboot
          Windows:
            install_type: standard:springboot
        needs_admin: true    # Add this field


      - name: mongodb-compass
        roles: ["backend"]
        platforms:
          type: universal
        install_type: standard:mongodb-compass
        needs_admin: true    # Add this field

      - name: mongosh
        roles: ["backend"]
        platforms:
          type: universal
        install_type: standard:mongodb-compass
        needs_admin: true    # Add this field
        
      - name: slack
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:slack
        needs_admin: true    # Add this field

      - name: zoom
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:zoom
        needs_admin: true    # Add this field

      - name: postman
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:postman
        needs_admin: true    # Add this field

      - name: k6
        roles: ["QA"]
        platforms:
          type: universal
        install_type: standard:k6
        needs_admin: false    # Add this field

      - name: httpie
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:httpie
        needs_admin: false    # Add this field

      - name: bruno
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:bruno
        needs_admin: true    # Add this field

      - name: selenium-server
        roles: ["QA"]
        platforms:
          type: universal
        install_type: standard:selenium-server
        needs_admin: false    # Add this field

      - name: firefox
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:firefox
          Linux:
            install_type: standard:firefox
          Windows:
            install_type: standard:firefox
        needs_admin: true    # Add this field

      - name: curl
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:curl
        needs_admin: false    # Add this field

      - name: zsh
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:zsh
        needs_admin: false    # Add this field

      - name: tmux
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:tmux
        needs_admin: false    # Add this field

      - name: telnet
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:telnet
        needs_admin: false    # Add this field

      - name: docker
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:docker
          Linux:  
            install_type: shell:sudo apt-get install docker-ce docker-ce-cli containerd.io -y 
          Windows:  
            install_type: shell:choco install docker-desktop -y
        needs_admin: true    # Add this field

      - name: miniconda
        roles: ["backend"]
        platforms:
          type: universal
        install_type: standard:miniconda
        needs_admin: false    # Add this field

      - name: flutter
        roles: ["mobile"]
        platforms:
          type: platform-specific
          Linux:    
            install_type: standard:flutter
          Windows:
            install_type: standard:flutter
        needs_admin: false    # Add this field

      - name: cocoapods
        roles: ["mobile"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:cocoapods
            # shell:brew install brew-gem && && brew link --force brew-gem && gem install cocoapods
        needs_admin: false    # Add this field

      - name: android-platform-tools
        roles: ["mobile"]
        platforms:
          type: universal
        install_type: standard:android-platform-tools
        needs_admin: false    # Add this field

      - name: fastlane
        roles: ["mobile"]
        platforms:
          type: universal
        install_type: standard:fastlane
        needs_admin: false    # Add this field

      - name: google-chrome
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:google-chrome
          Linux:
            install_type: standard:google-chrome-stable
          Windows:
            install_type: standard:googlechrome
        needs_admin: true    # Add this field

      - name: microsoft-edge
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:microsoft-edge
          Linux:
            install_type: standard:microsoft-edge-stable
          Windows:
            install_type: standard:microsoft-edge
        needs_admin: true    # Add this field

      - name: visual-studio-code
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:visual-studio-code
        needs_admin: true    # Add this field

      - name: intellij-idea-ce
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:intellij-idea-ce
        needs_admin: true    # Add this field

      - name: netbeans
        roles: ["full-stack"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:netbeans
          Linux:
            install_type: standard:netbeans-linux-deb-package
          Windows:
            install_type: standard:netbeans
        needs_admin: true    # Add this field

      - name: eclipse-java
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:eclipse-java
        needs_admin: true    # Add this field

      - name: papyrus
        roles: ["full-stack"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:papyrus
          Linux:
            install_type: standard:papyrus-linux-deb-package
          Windows:
            install_type: standard:papyrus
        needs_admin: true    # Add this field

      - name: font-fira-code
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:font-fira-code
        needs_admin: true    # Add this field

      - name: syncthing
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: syncthing:syncthing
          Linux:
            install_type: standard:syncthing
          Windows:
            install_type: standard:syncthing
        needs_admin: true    # Add this field

      - name: cypher-shell
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:cypher-shell
        needs_admin: false    # Add this field

      - name: protobuf-compiler
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:protobuf
          Linux:
            install_type: standard:protobuf-compiler
          Windows:
            install_type: shell:choco install protoc -y
        needs_admin: false    # Add this field

      - name: build-essential
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: special:xcode_install
          Linux:
            install_type: standard:build-essential
          Windows:
            install_type: standard:build-tools
        needs_admin: false    # Add this field

      - name: apt-transport-https
        roles: ["default"]
        platforms:
          type: platform-specific
          Linux:
            install_type: standard:apt-transport-https
        needs_admin: false    # Add this field

      - name: ca-certificates
        roles: ["default"]
        platforms:
          type: platform-specific
          Linux:
            install_type: standard:ca-certificates
        needs_admin: false    # Add this field

      - name: gnupg
        roles: ["default"]
        platforms:
          type: platform-specific
          Linux:
            install_type: standard:gnupg
        needs_admin: false    # Add this field

      - name: lsb-release
        roles: ["default"]
        platforms:
          type: platform-specific
          Linux:
            install_type: standard:lsb-release
        needs_admin: false    # Add this field

      - name: oh-my-posh
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:on-my-posh
        needs_admin: false    # Add this field

      - name: oh-my-zsh
        roles: ["default"]
        platforms:
          type: platform-specific
          Linux:    
            install_type: shell:sh -c '[ ! -d "$HOME/.oh-my-zsh" ] && curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh || echo "oh-my-zsh already installed"'
        needs_admin: false    # Add this field
            
      - name: neo4j
        roles: ["full-stack"]
        platforms:
          type: universal
        install_type: standard:neo4j
        needs_admin: false    # Add this field

#      - name: neo4j-desktop
#        roles: ["full-stack"]
#        platforms:
#          type: platform-specific
#          Darwin:
#            install_type: special:neo4j_desktop_install
#          Linux:
#            install_type: special:neo4j_desktop_install
#          Windows:
#            install_type: special:neo4j_desktop_install

      - name: zip
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:zip
        needs_admin: false    # Add this field

      - name: asdf
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:asdf
          Linux:
            install_type: standard:asdf
          Windows:
            install_type: special:asdf_install
        needs_admin: false

      - name: iterm2
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:iterm2
        needs_admin: true    # Add this field

      - name: yq
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:yq
        needs_admin: false    # Add this field

      - name: fd
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:fd
        needs_admin: false    # Add this field

      - name: azure-cli
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:azure-cli
        needs_admin: false    # Add this field

      - name: google-cloud-sdk
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:google-cloud-sdk
        needs_admin: false    # Add this field

      - name: awscli
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:awscli
        needs_admin: false    # Add this field

      - name: notion
        roles: ["default"]
        platforms:
          type: univeral 
        install_type: standard:notion
        needs_admin: true    # Add this field
      
      - name: notion-calendar
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:notion-calendar
        needs_admin: true    # Add this field

      - name: gradle
        roles: ["backend"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:gradle
          Linux:
            install_type: standard:gradle
          Windows:
            install_type: standard:gradle
        needs_admin: false

      - name: maven
        roles: ["backend"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:maven
          Linux:
            install_type: standard:maven
          Windows:
            install_type: standard:maven
        needs_admin: false

      - name: raycast
        roles: ["default"]
        platforms:
          type: universal
        install_type: standard:raycast
        needs_admin: true    # Add this field

      - name: uv
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:uv
        needs_admin: false    # Add this field

      - name: taplo
        roles: ["default"]
        platforms:
          type: platform-specific
          Darwin:
            install_type: standard:taplo
        needs_admin: false    # Add this field

  tasks:

    # Include Windows tasks only if we're on Windows
    - name: Include Windows tasks
      include_tasks: "{{ playbook_dir }}/windows_tasks.yml"
      when: 
        - ansible_facts['os_family'] == 'Windows'
        - ansible_facts['distribution'] != 'MacOSX'

    - name: Install Xcode Command Line Tools
      ansible.builtin.shell: |
        if ! xcode-select --print-path &>/dev/null; then
          xcode-select --install
        else
          echo "Xcode Command Line Tools are already installed."
        fi
      become: true  # Always needs admin
      become_user: "{{ admin_user }}"
      args:
        executable: /bin/bash
      when: ansible_facts['os_family'] == 'Darwin'
      tags:
        - xcode-setup

        # Keep this for Linux but simplify
    - name: Configure asdf for Java on Linux
      ansible.builtin.shell:
        cmd: |
          # Make sure asdf is available
          if ! command -v asdf &> /dev/null; then
            source ~/.bashrc  # Try to load asdf if just installed
          fi

          # Source asdf
          . $HOME/.asdf/asdf.sh
          
          # Add Java plugin and install
          asdf plugin list | grep -q "java" || asdf plugin add java
          asdf install java openjdk-21
          asdf global java openjdk-21
      args:
        executable: /bin/bash
      when: ansible_facts['os_family'] == 'Linux'
      tags: ['java-setup']

    - name: Configure asdf shell integration
      ansible.builtin.blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.zshrc"
        block: |
          . $(brew --prefix asdf)/libexec/asdf.sh
        marker: "# {mark} ASDF INTEGRATION"
        create: yes
      when: 
        - ansible_facts['os_family'] == 'Darwin'
        - ansible_user_shell == '/bin/zsh'
      tags: ['java-setup']

    - name: Install and configure asdf plugins
      ansible.builtin.shell:
        cmd: |
          . $(brew --prefix asdf)/libexec/asdf.sh
          
          # Install plugins one by one
          for plugin in java flutter; do
            version=""
            case $plugin in
              "java") version="openjdk-21" ;;
              "flutter") version="latest" ;;
            esac
            
            # Install plugin if not present
            asdf plugin list | grep -q "$plugin" || asdf plugin add "$plugin"
            asdf install "$plugin" "$version"
            asdf global "$plugin" "$version"
          done
        executable: /bin/bash  # Explicitly use bash
      when: ansible_facts['os_family'] == 'Darwin'
      tags: ['java-setup']

    # Keep but modify Linux Java setup
    - name: Configure asdf for Java on Linux
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      ansible.builtin.shell:
        cmd: |
          # Install asdf first if not present
          if [ ! -d "$HOME/.asdf" ]; then
            git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.13.1
            echo '. "$HOME/.asdf/asdf.sh"' >> ~/.bashrc
            source ~/.bashrc
          fi
          
          # Source asdf
          . $HOME/.asdf/asdf.sh
          
          # Add Java plugin and install
          asdf plugin list | grep -q "java" || asdf plugin add java
          asdf install java openjdk-21
          asdf global java openjdk-21
      args:
        executable: /bin/bash
      when: ansible_facts['os_family'] == 'Linux'
      tags: ['java-setup']

    - name: Uninstall asdf
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      ansible.builtin.shell:
        cmd: |
          if [ "{{ ansible_facts['os_family'] }}" == "Darwin" ]; then
            brew uninstall asdf
          else
            rm -rf ~/.asdf
          fi
      when: ansible_facts['os_family'] in ['Darwin', 'Linux']
      tags:
        - uninstall

    # Universal tools installation
    - name: Install universal tools on Linux
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      ansible.builtin.package:
        name: "{{ item.name }}"
        state: present
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Linux'
      tags: ['install']

    - name: Install universal tools on macOS
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      community.general.homebrew:
        name: "{{ item.name }}"
        state: present
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Darwin'
      tags: ['install']
      
    # Install platform-specific tools
    - name: Install platform-specific tools with package manager
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      ansible.builtin.package:
        name: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
        state: present
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('standard:')
        - not item.platforms[ansible_facts['os_family']]['install_type'].startswith('special:')
        - ansible_facts['os_family'] == 'Linux'
      tags: ['install']

    - name: Install platform-specific tools with homebrew
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      community.general.homebrew:
        name: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
        state: present
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('standard:')
        - not item.platforms[ansible_facts['os_family']]['install_type'].startswith('special:')
        - ansible_facts['os_family'] == 'Darwin'
      tags: ['install']

    - name: Install platform-specific tools with shell commands
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      ansible.builtin.shell:
        cmd: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('shell:')
        - not item.platforms[ansible_facts['os_family']]['install_type'].startswith('special:')
      tags: ['install']

    - name: Debug platform-specific single app
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      ansible.builtin.debug:
        msg: >
          Platform: {{ ansible_facts['os_family'] }}
          Item: {{ item | to_yaml }}
          Install type: {{ item.platforms[ansible_facts['os_family']]['install_type'] }}
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: single_app is defined
      tags: ['install']


    - name: Debug uninstall items
      ansible.builtin.debug:
        msg: "Uninstalling {{ item.name }}"
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Darwin'
      tags: ['uninstall']

    # Uninstall tasks for Linux/macOS
    - name: Uninstall universal tools on Linux
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      ansible.builtin.package:
        name: "{{ item.name }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Linux'
      ignore_errors: true
      tags: ['uninstall']

    # - name: Uninstall universal tools on macOS
    #   become: "{{ item.needs_admin | default(false) }}"
    #   become_user: "{{ admin_user if item.needs_admin else omit }}"
    #   community.general.homebrew:
    #     name: "{{ item.name }}"
    #     state: absent
    #   loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
    #   when: ansible_facts['os_family'] == 'Darwin'
    #   ignore_errors: true
    #   tags: ['uninstall']

    - name: Uninstall universal tools on macOS
      become: true
      community.general.homebrew:
        name: "{{ item.name }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Darwin'
      vars:
        admin_user: "{{ admin_user if item.needs_admin else omit }}"
      ignore_errors: true
      tags: ['uninstall']



    # Uninstall platform-specific tools
    - name: Uninstall platform-specific tools with package manager
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      ansible.builtin.package:
        name: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('standard:')
        - ansible_facts['os_family'] == 'Linux'
      ignore_errors: true
      tags: ['uninstall']

    - name: Uninstall platform-specific tools with homebrew
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      community.general.homebrew:
        name: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('standard:')
        - ansible_facts['os_family'] == 'Darwin'
      ignore_errors: true
      tags: ['uninstall']


    # Uninstall role-based universal tools
    - name: Uninstall role-based universal tools on Linux
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      ansible.builtin.package:
        name: "{{ item.name }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Linux'
      ignore_errors: true
      tags: ['uninstall']


    - name: Uninstall role-based universal tools on macOS
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      community.general.homebrew:
        name: "{{ item.name }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'universal') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: ansible_facts['os_family'] == 'Darwin'
      ignore_errors: true
      tags: ['uninstall']

    # Role-based uninstall
    - name: Uninstall role-based platform-specific tools with package manager
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      ansible.builtin.package:
        name: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('standard:')
        - ansible_facts['os_family'] == 'Linux'
      ignore_errors: true
      tags: ['uninstall']

    - name: Uninstall role-based platform-specific tools with homebrew
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      community.general.homebrew:
        name: "{{ item.platforms[ansible_facts['os_family']]['install_type'].split(':', 1)[1] }}"
        state: absent
      loop: "{% if single_app is defined %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('name', 'equalto', single_app) | list }}{% else %}{{ tools | selectattr('platforms.type', 'equalto', 'platform-specific') | selectattr('roles', 'contains', role) | list }}{% endif %}"
      when: 
        - item.platforms[ansible_facts['os_family']] is defined
        - item.platforms[ansible_facts['os_family']]['install_type'].startswith('standard:')
        - ansible_facts['os_family'] == 'Darwin'
      ignore_errors: true
      tags: ['uninstall']


    # Bootstrap task (pre-installation)
    - name: Bootstrap environment
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      ansible.builtin.shell:
        cmd: |
          if [ -d "/usr/local" ]; then
            chown -R {{ ansible_user_id }}:admin /usr/local/*
            chmod -R g+rwx /usr/local/*
          fi
          if [ -d "/opt/homebrew" ]; then
            chown -R {{ ansible_user_id }}:admin /opt/homebrew/*
            chmod -R g+rwx /opt/homebrew/*
          fi
      when: ansible_facts['os_family'] == 'Darwin'
      tags: ['bootstrap']

    # Finish task (post-installation)
    - name: Finish setup
      become: "{{ item.needs_admin | default(false) }}"
      become_user: "{{ admin_user if item.needs_admin else omit }}"
      ansible.builtin.shell:
        cmd: |
          if [ -d "/usr/local" ]; then
            chown -R {{ ansible_user_id }}:admin /usr/local/*
            chmod -R g+rwx /usr/local/*
          fi
          if [ -d "/opt/homebrew" ]; then
            chown -R {{ ansible_user_id }}:admin /opt/homebrew/*
            chmod -R g+rwx /opt/homebrew/*
          fi
        executable: /bin/bash  # Add this line
      when: ansible_facts['os_family'] == 'Darwin'
      tags: ['finish']

    - name: Check if project structure exists
      ansible.builtin.stat:
        path: "~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate"
      register: project_template_dir
      tags: ['setup']

    - name: Create base project directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      when: not project_template_dir.stat.exists
      loop:
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/01-Requirements
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/02-Draft
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/03-Design
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/04-Prototype
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/05-DevelopmentNotes
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/06-TestingPlans
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/01-Docs/07-ReferenceMaterials
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/03-Src
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/05-Tests/01-UnitTests
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/05-Tests/02-IntegrationTests
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/05-Tests/03-EndToEndTests
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/01-WeeklyReports
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/02-MonthlyReviews
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/03-QuarterlyReviews
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/04-InitialProposal
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/05-TechnicalSpecs
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/06-FinalReport
        - ~/Developer/01-ToSync/01-50-Projects/00-ProjectTemplate/07-Deliverables/07-Presentations
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/01-Requirements
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/02-Draft
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/03-Design
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/04-Prototype
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/05-DevelopmentNotes
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/06-TestingPlans
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/01-Docs/07-ReferenceMaterials
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/03-Src
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/05-Tests/01-UnitTests
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/05-Tests/02-IntegrationTests
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/05-Tests/03-EndToEndTests
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/01-WeeklyReports
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/02-MonthlyReviews
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/03-QuarterlyReviews
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/04-InitialProposal
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/05-TechnicalSpecs
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/06-FinalReport
        - ~/Developer/05-SyncSelected/05-50-Projects/00-ProjectTemplate/07-Deliverables/07-Presentations
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/01-Requirements
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/02-Draft
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/03-Design
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/04-Prototype
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/05-DevelopmentNotes
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/06-TestingPlans
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/01-Docs/07-ReferenceMaterials
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/03-Src
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/05-Tests/01-UnitTests
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/05-Tests/02-IntegrationTests
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/05-Tests/03-EndToEndTests
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/01-WeeklyReports
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/02-MonthlyReviews
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/03-QuarterlyReviews
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/04-InitialProposal
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/05-TechnicalSpecs
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/06-FinalReport
        - ~/Developer/09-NoSync/09-50-Projects/00-ProjectTemplate/07-Deliverables/07-Presentations
      tags: ['setup']
